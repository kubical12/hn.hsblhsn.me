// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: readability.proto

package readabilityclient

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReadabilityClient is the client API for Readability service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadabilityClient interface {
	GetReadableDocument(ctx context.Context, in *GetReadableDocumentRequest, opts ...grpc.CallOption) (*GetReadableDocumentResponse, error)
	GetReadinessInfo(ctx context.Context, in *GetReadinessInfoRequest, opts ...grpc.CallOption) (*GetReadinessInfoResponse, error)
}

type readabilityClient struct {
	cc grpc.ClientConnInterface
}

func NewReadabilityClient(cc grpc.ClientConnInterface) ReadabilityClient {
	return &readabilityClient{cc}
}

func (c *readabilityClient) GetReadableDocument(ctx context.Context, in *GetReadableDocumentRequest, opts ...grpc.CallOption) (*GetReadableDocumentResponse, error) {
	out := new(GetReadableDocumentResponse)
	err := c.cc.Invoke(ctx, "/readabilitypb.Readability/GetReadableDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readabilityClient) GetReadinessInfo(ctx context.Context, in *GetReadinessInfoRequest, opts ...grpc.CallOption) (*GetReadinessInfoResponse, error) {
	out := new(GetReadinessInfoResponse)
	err := c.cc.Invoke(ctx, "/readabilitypb.Readability/GetReadinessInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadabilityServer is the server API for Readability service.
// All implementations must embed UnimplementedReadabilityServer
// for forward compatibility
type ReadabilityServer interface {
	GetReadableDocument(context.Context, *GetReadableDocumentRequest) (*GetReadableDocumentResponse, error)
	GetReadinessInfo(context.Context, *GetReadinessInfoRequest) (*GetReadinessInfoResponse, error)
	mustEmbedUnimplementedReadabilityServer()
}

// UnimplementedReadabilityServer must be embedded to have forward compatible implementations.
type UnimplementedReadabilityServer struct {
}

func (UnimplementedReadabilityServer) GetReadableDocument(context.Context, *GetReadableDocumentRequest) (*GetReadableDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadableDocument not implemented")
}
func (UnimplementedReadabilityServer) GetReadinessInfo(context.Context, *GetReadinessInfoRequest) (*GetReadinessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadinessInfo not implemented")
}
func (UnimplementedReadabilityServer) mustEmbedUnimplementedReadabilityServer() {}

// UnsafeReadabilityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadabilityServer will
// result in compilation errors.
type UnsafeReadabilityServer interface {
	mustEmbedUnimplementedReadabilityServer()
}

func RegisterReadabilityServer(s grpc.ServiceRegistrar, srv ReadabilityServer) {
	s.RegisterService(&Readability_ServiceDesc, srv)
}

func _Readability_GetReadableDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadableDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadabilityServer).GetReadableDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/readabilitypb.Readability/GetReadableDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadabilityServer).GetReadableDocument(ctx, req.(*GetReadableDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Readability_GetReadinessInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadinessInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadabilityServer).GetReadinessInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/readabilitypb.Readability/GetReadinessInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadabilityServer).GetReadinessInfo(ctx, req.(*GetReadinessInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Readability_ServiceDesc is the grpc.ServiceDesc for Readability service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Readability_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "readabilitypb.Readability",
	HandlerType: (*ReadabilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReadableDocument",
			Handler:    _Readability_GetReadableDocument_Handler,
		},
		{
			MethodName: "GetReadinessInfo",
			Handler:    _Readability_GetReadinessInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "readability.proto",
}
